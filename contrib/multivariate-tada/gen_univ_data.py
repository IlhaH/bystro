# -*- coding: utf-8 -*-
"""gen_univ_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ItYBUi7mCpYez_tuCmm3zkFgSEtv0PD
"""

import pandas as pd
import numpy as np
import numpy.random as rand

#Simulates univariate data based on demo mutation rates from code in original TADA paper (https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1003671)
def gen_univ_data(gamma: list, q: list, N_family: int, N_case: int, N_control: int, mut_1: 'array_like', mut_2: 'array_like', n : int, seed: int = 0):
    '''
    Function for generating synthetic data according to TADA probabilistic model

    Parameters
    ----------
    gamma : list
        List of genotype relative risks for genotype Aa where a is an allele with
        a LOF/missense mutation, and A without

    q : list
        List of probabilities of different types of mutation

    N_family : int
        Number of families in sample

    N_case : int
        Number of cases in case/control data

    N_control : int
        Number of controls in case/control data

    mut_1 : array_like
        1D array_like of mutation rates for first mutation class with type 'float'

    mut_2 : array_like
        1D array_like of mutation rates for second mutation class with type 'float'

    n : int
        Sample size

    seed : int
        Random seed, defaults to 0

    Returns:
        df : DataFrame
            Generated Data
    '''
    # Sets random seed
    rand.seed(int(seed))


    # Ensures mutation rates for the different classes are saved as numpy arrays
    mut_1 = np.array(mut_1)
    mut_2 = np.array(mut_2)

    #Initializes parameters for different mutation classes
    gamma_1, gamma_2 = gamma
    q_1, q_2 = q

    PLOIDY = 2

    # Rates for poisson distributions followed by the de novo mutations for the two categories,
    # transmitted/nontransmitted data, and transmission counts for case-control data respectively
    X_d_rates_1 = PLOIDY * mut_1 * gamma_1 * N_family
    X_d_rates_2 = PLOIDY * mut_2 * gamma_2 * N_family

    X_t_rates_1 = n * [q_1 * gamma_1 * N_family]
    X_nt_rates_1 = n * [q_1 * N_family]
    X_ctrl_rates_1 = n * [q_1 * (N_control + N_family)]
    X_case_rates_1 = n * [q_1 * gamma_1 * (N_case + N_family)]

    X_t_rates_2 = n * [q_2 * N_family]
    X_nt_rates_2 = n * [q_2 * N_family]
    X_ctrl_rates_2 = n * [q_2 * (N_control + N_family)]
    X_case_rates_2 = n * [q_2 * gamma_2 * (N_case + N_family)]

    # Stacks poisson rates and samples (cls indicates mutation class)
    cls1 = np.column_stack([X_d_rates_1, np.array(X_t_rates_1), np.array(X_nt_rates_1), np.array(X_ctrl_rates_1), np.array(X_case_rates_1)])
    cls2 = np.column_stack([X_d_rates_2, np.array(X_t_rates_2), np.array(X_nt_rates_2), np.array(X_ctrl_rates_2), np.array(X_case_rates_2)])
    sample_1 = rand.poisson(cls1).astype(int)
    sample_2 = rand.poisson(cls2).astype(int)

    # Combines simulated data with mutation rates into table
    table = np.column_stack((sample_1, sample_2))
    df = pd.DataFrame(table)
    df.columns = ['dn.cls1', 'trans.cls1', 'ntrans.cls1', 'case.cls1', 'ctrl.cls1', 'dn.cls2', 'trans.cls2', 'ntrans.cls2', 'case.cls2', 'ctrl.cls2']

    # Adds column of mutation rates for corresponding mutation class
    df.insert(0, 'mut.cls1', mut_1.reshape(-1, 1))
    df.insert(6, 'mut.cls2', mut_2.reshape(-1, 1))
    return df